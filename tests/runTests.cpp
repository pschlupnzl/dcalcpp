#include <iostream>
#include <cstring>
#include <tuple>
#include <vector>
#include "../CCalculate.h"
#include "../TToken.h"
#include "../eAction.h"
#include "../keymap.h"

typedef std::tuple<const char*, const char*, const char*> testCase_t;

const std::vector<testCase_t> numberCases = {
    { "1", "1", "1" },
    { "1 2", "12", "12" },
    { "1 2 3 . 4", "123.4", "123.4" },
    { "1 2 3 . 4 5", "123.45", "123.45" },
    { "1 2 3 . 4 5 9", "123.459", "123.459" },
    { "1 2 3 . 4 5 6", "123.456", "123.456" },
    { ". 1", "0.1", "0.1" },
    { "1 + 2", "1 + 2", "3" },
    { "1 - 2", "1 - 2", "-1" },
    { "1 + 2 * 3", "1 + 2 * 3", "7" },
    { "1 ±", "-1", "-1" },
    { "± 1", "-1", "-1" }, // neg can precede a number, too
    { "2 . 5", "2.5", "2.5" },
    { "1 ± ±", "1", "1" },
    { "2 ± / 4 ±", "-2 / -4", "0.5" },
    { "1 + ± 2", "1 + -2", "-1" },
    { "1 . 2 ± 3", "-1.23", "-1.23" },
    { "1 + 2", "1 + 2", "3" },
    { "1 + 2 . 3 / 4", "1 + 2.3 / 4", "1.575" },
    { "( 1", "( 1", "1" },
    { "( 1 )", "( 1 )", "1" },
    { "1 + 2 * 3", "1 + 2 * 3", "7" },
    { "( 1 + 2 ) * 3", "( 1 + 2 ) * 3", "9" },
    { "9 * 2 + 3", "9 * 2 + 3", "21" },
    { "( 9 * 2 ) + 3", "( 9 * 2 ) + 3", "21" },
    { "9 * ( 2 + 3 )", "9 * ( 2 + 3 )", "45" },
    { "9 * ( 2 + 3", "9 * ( 2 + 3", "45" }, // auto-close bracket
    { "1 2 * 3 4", "12 * 34", "408" },
    { "1 + ( 2 - 3 ± )", "1 + ( 2 - -3 )", "6" },
    { 
      "1 + ( 3 - 5 ) / ( 1 3 - 8 )",
      "1 + ( 3 - 5 ) / ( 13 - 8 )",
      "0.6",
     },
    { 
      "1 + ( 2 - 3 ± ) / ( 4 ± - 5 )",
      "1 + ( 2 - -3 ) / ( -4 - 5 )",
      "0.444444444444444",
     },
    { "( 1 + 2 ) * 3", "( 1 + 2 ) * 3", "9" },
    // { 
    //   "1 - ( 3 + 4 ) ^ ( 5 + 6 )",
    //   "1 - ( 3 + 4 ) ^ ( 5 + 6 )",
    //   "-1977326742" // (1 - Math.pow(7, 11)).toString(),
    //  },
    // { "sqrt ( 4 )", "sqrt ( 4 )", "2" },
    { "1 0 / 2 * 5", "10 / 2 * 5", "25" },
    { "1 0 * 5 / 2", "10 * 5 / 2", "25" },
};

const std::vector<testCase_t> fractionCases = {
  { "3 _ 4", "3_4", "3_4" },
  { "1 _ 3 _ 4", "1_3_4", "1_3_4" },
  { "1 _ 3 _ 4 ±", "-1_3_4", "-1_3_4" },
  { "1 _ 3 ± _ 4 ±", "1_3_4", "1_3_4" },
  { "1 _ 2 + 1 _ 3", "1_2 + 1_3", "5_6" },

  { "1 _ 2 * 1 _ 2", "1_2 * 1_2", "1_4" },
  { "± 1 _ 2 * 1 _ 2", "-1_2 * 1_2", "-1_4" },
  { "1 _ 2 * 1 ± _ 2", "1_2 * -1_2", "-1_4" },
  { "1 _ 2 ± * 1 ± _ 2", "-1_2 * -1_2", "1_4" },

  { "1 _ 2 / 1 _ 3", "1_2 / 1_3", "1_1_2" },
  { "± 1 _ 2 / 1 _ 3", "-1_2 / 1_3", "-1_1_2" },
  { "1 _ 2 / ± 1 _ 3", "1_2 / -1_3", "-1_1_2" },

  { "5 6 * 1 2 _ 4 / 4", "56 * 12_4 / 4", "42_0_1" }, // TS: 42_0_16
  { "5 6 * 1 2 _ 4 / 4 ±", "56 * 12_4 / -4", "-42_0_1" }, // TS: -42_0_16
  { "5 6 * 3 _ 4 / 4", "56 * 3_4 / 4", "10_1_2" },
//   { "4 9 ^ 1 _ 2", "49 ^ 1_2", "7" },

  { "3 _ 4 _ 5", "3_4_5", "3_4_5" },
  { "3 _ 1 4 _ 5", "3_14_5", "5_4_5" },
  { "3 _ 4 _ 2", "3_4_2", "5_0_1" }, // TS: 5_0_2
  { "3 _ 5 _ 7", "3_5_7", "3_5_7" },
  { "3 _ ± 5", "-3_5", "-3_5" },
  { "3 _ 5 ±", "-3_5", "-3_5" },
  { "± 3 _ 5", "-3_5", "-3_5" },
  { "± 3 ± _ ± 5 ±", "3_5", "3_5" },
  { "1 * 2 _ 3", "1 * 2_3", "2_3" },
  { "1 _ 2 / 3", "1_2 / 3", "1_6" },
  { "1 _ 2 * 3 _ 4", "1_2 * 3_4", "3_8" },
  { "1 _ 2 / 3 _ 4", "1_2 / 3_4", "2_3" },

  { "1 _ 2 + 3 _ 4 _ 5", "1_2 + 3_4_5", "4_3_10" },
  { "1 _ 2 * 3 _ 4 + ( 5 / 7 _ 8 _ 9 )", "1_2 * 3_4 + ( 5 / 7_8_9 )", "1_5_568" },
  { "2 0 0 _ 1 0 / 1 0 * 3 _ 5", "200_10 / 10 * 3_5", "1_1_5" },

  { "1 - 1 _ 2", "1 - 1_2", "1_2" },
  { "1 + 1 _ 2", "1 + 1_2", "1_1_2" },
  { "1 _ 2 + 1 _ 2", "1_2 + 1_2", "1_0_1" }, // TS: 1_0_4
  { "1 _ 2 - 1 _ 2", "1_2 - 1_2", "0_1" }, // TS: 0_4
  { "1 - 1 _ 2", "1 - 1_2", "1_2" },
  { "2 _ 5 - 3 _ 5", "2_5 - 3_5", "-1_5" },
  { "1 _ 3 - 1", "1_3 - 1", "-2_3" },
  { "1 + 1 _ 2 ±", "1 + -1_2", "1_2" },
  { "1 - 1 _ 2 ±", "1 - -1_2", "1_1_2" },

  { "3 _ 5 + 2 _ 5", "3_5 + 2_5", "1_0_1" }, // TS: 1_0_25
  { "3 _ 5 + 2 ± _ 5", "3_5 + -2_5", "1_5" },
  { "3 ± _ 5 + 2 _ 5", "-3_5 + 2_5", "-1_5" },
  { "3 ± _ 5 + 2 ± _ 5", "-3_5 + -2_5", "-1_0_1" }, // TS: -1_0_25

  { "3 _ 5 - 2 _ 5", "3_5 - 2_5", "1_5" },
  { "3 _ 5 - 2 ± _ 5", "3_5 - -2_5", "1_0_1" }, // TS: 1_0_25
  { "3 ± _ 5 - 2 _ 5", "-3_5 - 2_5", "-1_0_1" }, // TS: -1_0_25
  { "3 ± _ 5 - 2 ± _ 5", "-3_5 - -2_5", "-1_5" },

  { "3 _ 5 * 2 _ 5", "3_5 * 2_5", "6_25" },
  { "3 _ 5 * 2 ± _ 5", "3_5 * -2_5", "-6_25" },
  { "3 ± _ 5 * 2 _ 5", "-3_5 * 2_5", "-6_25" },
  { "3 ± _ 5 * 2 ± _ 5", "-3_5 * -2_5", "6_25" },

  { "3 _ 5 / 2 _ 5", "3_5 / 2_5", "1_1_2" },
  { "3 _ 5 / 2 ± _ 5", "3_5 / -2_5", "-1_1_2" },
  { "3 ± _ 5 / 2 _ 5", "-3_5 / 2_5", "-1_1_2" },
  { "3 ± _ 5 / 2 ± _ 5", "-3_5 / -2_5", "1_1_2" },

//   { "9 ^ ( 1 _ 2 )", "9 ^ ( 1_2 )", "3" },
//   { "9 ^ ( 1 _ 2 ± )", "9 ^ ( -1_2 )", "0.3333333333333333" },
};


const std::vector<testCase_t> autogenCases = {
  {
    "4 3 7 . 2 6 / 5 4 9 . 1 7 / 8 2 1 . 0 0 * 5 9 9 . 2 3",
    "",
    "0.581143435657979",
  }, // TS: 0.5811434356579791
  {
    "2 5 9 . 2 1 * 4 5 8 . 8 0 / 8 9 9 . 6 7 + ( 5 5 . 9 8 / 1 3 1 . 5 6 )",
    "",
    "132.613475972236",
  }, // TS: 132.61347597223607
//   {"6 9 1 . 9 2 ^ ( 8 6 6 . 4 1 - 8 7 1 . 0 6 )", "", "6.219280417941957e-14"},
//   {"( tan ( ( 5 3 3 . 4 3 * 2 2 . 6 8 ) ) )", "", "0.7867076410974511"},
//   {"2 8 6 . 2 6 - 9 9 9 . 2 3 - 7 6 5 . 1 3 + 4 3 0 . 3 5", "", "-1047.75"},
//   {
//     "1 4 3 . 7 2 + ( 1 3 4 . 6 7 ) + sin ( 9 1 3 . 9 1 )",
//     "",
//     "278.14960253919537",
//   },
//   {"4 6 4 . 9 2 - 3 5 7 . 5 7 * 2 0 0 . 3 6 - 5 1 9 . 8 7", "", "-71697.6752"},
//   {"3 5 . 5 5 + 4 4 8 . 0 0 * 1 1 3 . 4 6 * 4 9 2 . 7 0", "", "25044015.966"},
//   {
//     "4 7 4 . 9 0 ^ 2 4 . 8 1 * 3 7 2 . 0 3 + 3 4 5 . 9 2",
//     "",
//     "9.48588356436863e+68",
//   },
//   {"( 4 3 8 . 9 0 ) + sin ( 8 7 9 . 5 0 )", "", "439.25020738125943"},
//   {
//     "5 5 8 . 8 5 - 5 5 9 . 7 2 * 8 8 7 . 1 0 + sin ( tan ( 8 1 7 . 4 6 ) )",
//     "",
//     "-495968.8948955925",
//   },
//   {
//     "6 0 1 . 6 1 - 2 4 5 . 6 2 - 1 0 9 . 0 3 ^ 9 5 . 7 1",
//     "",
//     "-1.0316415296616509e+195",
//   },
//   {"8 6 4 . 7 2 + 9 8 5 . 8 8 - 4 6 4 . 0 8 + 8 7 2 . 4 6", "", "2258.98"},
//   {"6 7 . 7 0 ^ 8 0 . 7 7 / ( 5 5 0 . 9 0 )", "", "1.3048902836124667e+145"},
//   {"2 0 7 . 6 1 * 2 3 6 . 6 9 * ( 6 6 9 . 4 0 )", "", "32893787.776460003"},
//   {"( 4 5 8 . 1 8 / tan ( 2 2 3 . 8 4 ) )", "", "477.1184715219136"},

//   {
//     "2 0 2 . 3 6 + 7 6 6 . 1 4 - 9 5 4 . 0 2 + 1 4 6 . 0 5 - 7 8 0 . 7 6 / 3 5 1 . 3 9 - 6 6 . 1 3",
//     "",
//     "92.17808133413021",
//   },
//   {
//     "( 7 4 0 . 3 1 ) * 9 3 3 . 2 8 * ( sin ( cos ( 6 1 6 . 3 9 / sqrt ( 1 5 2 . 7 8 ) ) ) )",
//     "",
//     "7772.3169402647445",
//   },
//   {
//     "8 5 9 . 7 1 * 7 5 5 . 3 8 / 3 6 9 . 8 5 / tan ( 3 2 1 . 8 6 / ( 4 0 1 . 4 6 / sin ( sqrt ( sqrt ( 9 9 3 . 9 2 ) ) ) ) )",
//     "",
//     "1282536.091453233",
//   },
//   {
//     "3 4 2 . 8 8 * sqrt ( 1 8 7 . 1 2 - 7 3 4 . 8 2 / 5 4 6 . 1 4 + cos ( 2 5 4 . 2 5 / 9 2 4 . 9 0 ) )",
//     "",
//     "4685.985665543743",
//   },
//   {
//     "8 6 7 . 0 6 * 3 3 3 . 0 7 + 7 8 0 . 7 2 / 8 3 1 . 2 9 / 5 6 3 . 0 3 + 3 7 0 . 6 1 / tan ( sin ( sin ( 6 8 1 . 0 2 ) ) )",
//     "",
//     "-1645342.4514303645",
//   },
//   {
//     "3 8 . 1 7 * 7 1 . 3 3 - 1 7 6 . 0 3 / 3 9 0 . 8 0 - 6 3 . 5 4 + 7 5 5 . 6 1 - 9 4 7 . 7 3",
//     "",
//     "2466.555664994882",
//   },
//   {
//     "1 1 2 . 8 8 - 3 4 7 . 4 2 + sin ( cos ( 7 6 0 . 9 9 ) ) - 1 8 6 . 2 6 + 4 1 5 . 3 2",
//     "",
//     "-5.46682621573774",
//   },
//   {
//     "5 0 2 . 0 7 / ( ( 9 5 3 . 3 0 - 9 3 2 . 3 9 / 1 1 9 . 2 0 ) ) / 3 . 1 1",
//     "",
//     "0.17074676504573189",
//   },
//   {
//     "6 4 1 . 1 6 / 4 6 6 . 2 6 - 7 4 3 . 8 5 + 6 9 1 . 5 4 ^ cos ( ( 8 7 5 . 9 1 - 9 0 . 0 0 ) )",
//     "",
//     "-728.0493682554961",
//   },
//   {
//     "5 4 7 . 6 5 ^ 5 2 . 6 7 ^ 9 9 . 9 5 ^ sin ( 6 8 7 . 3 7 - 8 8 9 . 3 0 / 1 3 7 . 9 3 )",
//     "",
//     "0",
//   },

//   {
//     "7 7 4 . 5 6 - sin ( 2 0 6 . 2 0 ) / 1 5 6 . 3 4 / sqrt ( 5 6 9 . 8 7 - 5 2 8 . 6 4 )",
//     "",
//     "774.5604398045217",
//   },
//   {
//     "( 1 4 5 . 1 9 ) + sin ( 8 9 6 . 1 1 - 5 3 1 . 6 8 - ( 7 6 7 . 9 5 ) )",
//     "",
//     "144.50139226282667",
//   },
//   {
//     "9 8 6 . 5 5 * sin ( 9 6 1 . 3 7 - ( 1 4 2 . 2 2 ) / 4 0 1 . 5 6 ^ sqrt ( ( sin ( tan ( 2 4 2 . 0 6 ) ) ) ) )",
//     "",
//     "-229.1877089389707",
//   },
//   {
//     "9 9 0 . 1 4 * 2 9 0 . 2 5 - tan ( 3 6 7 . 8 8 + ( tan ( sqrt ( 4 1 1 . 2 1 - 2 7 3 . 4 7 ) ) ) )",
//     "",
//     "287387.9928970461",
//   },
//   {
//     "1 4 3 . 1 5 - 2 7 1 . 1 7 + 1 6 . 2 8 + tan ( 2 6 7 . 1 4 ) * 4 3 6 . 9 3 * ( 2 2 9 . 9 0 )",
//     "",
//     "2010584.7620016804",
//   },

//   {
//     "3 0 2 . 8 6 / sqrt ( 9 8 8 . 8 9 * 1 8 . 4 9 / sqrt ( 2 0 1 . 4 6 / 6 5 8 . 5 7 ) )",
//     "",
//     "1.6656977205466617",
//   },
//   {
//     "2 7 1 . 2 9 + 4 0 9 . 1 1 * 7 8 . 0 1 - tan ( 2 8 . 8 4 / 1 0 8 . 7 9 ^ 2 4 . 3 9 )",
//     "",
//     "32185.961100000004",
//   },
//   {
//     "( 4 7 4 . 6 9 ) * 6 1 5 . 5 0 * 5 5 0 . 3 6 * ( 2 3 4 . 8 7 * 6 8 6 . 5 4 )",
//     "",
//     "25928559855954.285",
//   },
//   {
//     "( 8 8 1 . 7 2 ) - cos ( 4 0 4 . 4 9 - tan ( tan ( 9 0 1 . 3 6 + 3 9 . 5 8 ) ) )",
//     "",
//     "881.0064420651171",
//   },
//   {
//     "( 8 7 7 . 1 3 / 3 0 5 . 2 7 ) + ( 1 8 . 8 1 * ( 5 9 6 . 1 7 ) )",
//     "",
//     "11216.830992495166",
//   },
//   {
//     "4 5 0 . 5 5 * sqrt ( cos ( 7 1 8 . 2 7 + 6 7 2 . 9 8 ) * 2 0 2 . 4 8 ) / 2 6 6 . 5 7",
//     "",
//     "19.528973456974253",
//   },
//   {
//     "2 0 3 . 4 9 + sin ( cos ( 9 1 5 . 3 8 ) ) * 3 4 9 . 9 9 * 9 3 4 . 5 0 + 2 7 5 . 2 7",
//     "",
//     "-5024.924778811022",
//   },
//   {
//     "7 9 5 . 7 1 - 7 4 8 . 7 2 - 4 9 3 . 9 3 / 1 3 7 . 0 8 - 7 9 5 . 4 8 / 7 2 9 . 8 0 / 1 5 4 . 7 4",
//     "",
//     "43.3797315492656",
//   },
//   {
//     "3 4 . 7 7 - cos ( 1 6 9 . 4 3 + ( 7 3 6 . 8 5 ) ^ ( sqrt ( 7 3 2 . 4 2 ) ) )",
//     "",
//     "35.73964499299532",
//   },
//   {
//     "5 7 6 . 9 0 + 9 0 . 5 6 + 7 6 . 1 2 / sin ( 4 5 . 6 5 - sqrt ( 6 5 0 . 7 1 ) )",
//     "",
//     "888.5261566270631",
//   },
//   {
//     "tan ( 5 4 5 . 0 5 / 1 0 . 6 6 / 2 1 4 . 4 2 - 7 9 0 . 2 4 - 2 8 . 4 0 + 7 7 8 . 9 4 )",
//     "",
//     "-0.8232096454056111",
//   },
//   {
//     "8 2 0 . 0 2 + cos ( 5 6 6 . 8 7 ) / 8 1 0 . 3 8 * 9 5 . 9 8 - 6 2 4 . 6 3 - sin ( 6 6 1 . 3 5 )",
//     "",
//     "196.1383541451928",
//   },
//   {
//     "1 1 2 . 8 5 - 6 9 5 . 2 9 + 4 7 1 . 3 8 - 3 2 6 . 7 4 * 2 5 3 . 6 6 * 1 5 5 . 4 7 - 5 9 3 . 6 8",
//     "",
//     "-12886193.350148002",
//   },
//   {
//     "3 2 1 . 8 1 - 6 2 1 . 0 4 - cos ( 8 0 5 . 7 1 + 8 8 6 . 1 5 ) / ( 9 5 7 . 8 1 )",
//     "",
//     "-299.2296749460341",
//   },
//   {
//     "9 7 3 . 6 7 - 5 4 2 . 3 3 - ( 6 6 . 0 3 * 7 1 2 . 9 2 ) - 6 1 3 . 6 1 / 4 6 4 . 0 3",
//     "",
//     "-46644.08994984807",
//   },
//   {
//     "2 3 6 . 2 5 ^ sin ( 5 2 0 . 9 7 - 3 8 0 . 7 3 ^ 3 2 . 4 4 / tan ( 4 9 4 . 0 6 * 9 3 3 . 2 7 ) )",
//     "",
//     "22.230354375953354",
//   },
//   {
//     "8 5 8 . 3 4 / 6 8 3 . 8 6 ^ 3 . 7 7 + ( ( 4 2 4 . 3 3 / 3 2 1 . 8 0 * 6 9 7 . 1 7 ) )",
//     "",
//     "919.2981544613667",
//   },
//   {
//     "1 7 2 . 0 9 - 1 8 6 . 3 3 / tan ( 7 7 3 . 5 3 - 9 5 9 . 5 4 / tan ( 1 5 2 . 5 7 * cos ( 5 1 . 9 0 ) ) )",
//     "",
//     "293.1109029608003",
//   },
//   {
//     "sqrt ( cos ( 4 7 . 7 4 ) ) * 5 0 4 . 2 2 * 3 0 4 . 8 7 * tan ( cos ( 9 6 9 . 6 8 ) )",
//     "",
//     "-764.0483211692336",
//   },
//   {
//     "tan ( 4 2 0 . 1 2 + 2 7 5 . 7 5 ^ 5 . 4 4 ) + 7 8 0 . 5 3 + ( 8 4 . 9 3 )",
//     "",
//     "865.2791463845663",
//   },
//   {
//     "6 6 6 . 7 2 * ( 6 5 2 . 6 5 * 1 9 0 . 2 0 + 9 9 3 . 5 4 * ( 2 4 9 . 9 8 / ( ( 1 0 8 . 1 0 ) ) ) )",
//     "",
//     "84294462.85847533",
//   },
//   {
//     "5 0 2 . 5 9 / cos ( 9 3 1 . 6 5 * 9 8 2 . 6 6 * sin ( 3 7 9 . 4 9 / sqrt ( 4 6 4 . 9 8 ) ) )",
//     "",
//     "656.1574317898697",
//   },
//   {
//     "3 2 7 . 5 8 / ( 7 4 3 . 4 8 / sqrt ( 2 4 5 . 6 1 * 9 7 7 . 4 7 ) / 5 4 1 . 0 0 )",
//     "",
//     "116793.8822040555",
//   },
//   {
//     "8 1 8 . 0 2 * sqrt ( 1 0 2 . 4 5 ) - 5 4 3 . 2 9 - ( 5 8 0 . 4 0 / ( tan ( 3 4 7 . 6 1 ) ) )",
//     "",
//     "10378.520255204527",
//   },
//   {
//     "sin ( 3 3 7 . 9 0 - sqrt ( 3 5 0 . 5 3 - 8 9 3 . 6 8 / 3 8 1 . 9 8 ) - 5 1 3 . 6 5 )",
//     "",
//     "0.24885657814712006",
//   },
//   {
//     "9 4 4 . 2 5 * 3 6 2 . 8 8 ^ cos ( 2 3 6 . 4 1 ) ^ 7 1 . 0 3 + 2 3 5 . 7 7 * 2 5 3 . 9 6",
//     "",
//     "59876.14920000001",
//   },
//   {
//     "2 1 5 . 3 9 - 4 4 6 . 1 5 / 4 0 3 . 0 1 - ( 2 8 8 . 4 7 / cos ( 1 0 0 . 3 1 - 7 1 6 . 1 4 ) )",
//     "",
//     "1392.6746727704385",
//   },
//   {
//     "5 2 0 . 1 4 - 8 9 7 . 8 8 + 5 6 2 . 3 8 ^ cos ( cos ( 4 0 2 . 2 2 ) + ( sqrt ( ( tan ( 9 0 6 . 7 6 ) ) ) ) )",
//     "",
//     "184.00203804361",
//   },
//   {
//     "9 2 7 . 3 7 + ( 1 1 9 . 9 2 ) + 8 6 . 4 3 / 6 2 6 . 3 2 - 5 7 4 . 4 9 / 7 5 6 . 5 7",
//     "",
//     "1046.6686616582797",
//   },
//   {
//     "5 1 8 . 5 5 / cos ( 2 0 4 . 8 0 / ( 5 7 3 . 4 3 - 3 1 0 . 8 2 / 3 5 2 . 4 4 ) )",
//     "",
//     "518.5601055136639",
//   },
//   {
//     "1 4 3 . 2 4 - 5 6 3 . 8 2 / 9 1 3 . 1 4 + 5 3 6 . 5 1 - 3 2 7 . 2 9 + 2 4 8 . 9 0 / 6 0 6 . 3 8",
//     "",
//     "352.25301681363027",
//   },
//   {
//     "2 0 8 . 0 0 / 8 3 2 . 1 5 / 8 4 7 . 6 5 / 1 7 7 . 3 7 + sqrt ( 9 2 6 . 7 6 / 1 0 . 4 8 )",
//     "",
//     "9.403793329171666",
//   },
//   {
//     "2 5 7 . 5 1 + cos ( 6 5 9 . 5 3 - 8 2 0 . 9 3 ) - 6 3 8 . 3 4 * sqrt ( ( 5 3 4 . 2 8 ) )",
//     "",
//     "-14498.34617605416",
//   },
//   {
//     "( 3 1 9 . 1 7 / 6 3 9 . 5 9 * 6 1 0 . 2 8 ) / 2 1 8 . 0 6 - 2 3 2 . 0 3 - 7 7 4 . 4 0",
//     "",
//     "-1005.0333952059283",
//   },
//   {
//     "8 9 1 . 8 5 / 4 9 4 . 6 0 * cos ( cos ( 4 2 8 . 8 8 ) / tan ( 7 9 8 . 8 7 ) )",
//     "",
//     "1.8031729021413374",
//   },
//   {
//     "1 2 2 . 9 9 / cos ( sin ( 8 4 8 . 2 8 / 9 9 2 . 6 6 + 9 2 2 . 1 9 * sin ( 9 8 4 . 1 2 ) ) )",
//     "",
//     "122.99150812127154",
//   },
//   {
//     "6 0 . 0 1 * 5 3 9 . 0 2 ^ sin ( 4 5 7 . 1 1 + sqrt ( 9 8 1 . 6 4 - tan ( 9 6 2 . 4 5 ) ) )",
//     "",
//     "8291.87349255241",
//   },
//   {
//     "6 8 2 . 4 6 - ( tan ( 9 3 8 . 9 8 / 5 8 . 4 1 ) * 6 9 6 . 1 8 / sqrt ( 6 6 5 . 0 6 ) )",
//     "",
//     "674.6805695439251",
//   },
//   {
//     "tan ( ( 5 8 5 . 7 8 * . 8 5 - ( tan ( 6 9 . 6 2 / 1 8 3 . 1 4 + cos ( 8 3 0 . 8 6 ) ) ) ) )",
//     "",
//     "-0.9031705930311857",
//   },
//   {
//     "1 8 7 . 9 2 * 9 4 7 . 8 0 * 3 8 5 . 5 5 ^ 3 . 7 2 ^ ( sin ( ( 8 2 0 . 9 7 ) ) )",
//     "",
//     "495586234260049.75",
//   },
//   {
//     "6 2 0 . 4 6 + 1 5 2 . 8 5 * 6 6 4 . 9 6 + tan ( 3 2 9 . 3 8 - 6 7 8 . 7 4 / 3 4 1 . 5 7 )",
//     "",
//     "102258.95629825503",
//   },
//   {
//     "cos ( tan ( 5 4 3 . 4 7 - 7 8 5 . 5 2 + 8 2 4 . 6 8 ) + 5 5 4 . 2 4 ^ 2 . 9 6 )",
//     "",
//     "0.45028323012239974",
//   },
//   {
//     "6 1 0 . 7 2 + 3 9 5 . 3 1 ^ . 3 8 + 9 2 5 . 9 0 - 7 4 1 . 2 3 / 1 2 4 . 4 6 + 9 . 3 0",
//     "",
//     "1549.6658755689732",
//   },
//   {
//     "( 5 8 5 . 5 6 ) / 1 6 0 . 5 8 / 4 9 9 . 8 1 + cos ( sin ( 1 9 6 . 6 1 ) )",
//     "",
//     "1.0072833894229372",
//   },
//   {
//     "( 5 6 1 . 2 2 ) + 9 9 2 . 2 1 + sin ( ( cos ( 1 0 3 . 3 3 ) + 1 3 2 . 8 0 ) )",
//     "",
//     "1554.1664580007803",
//   },
//   {
//     "cos ( 3 9 7 . 3 1 + 2 0 8 . 5 8 ) / 4 9 4 . 2 3 * cos ( 6 9 6 . 1 4 ) * 7 8 8 . 5 5",
//     "",
//     "-0.5960495985205344",
//   },
//   {
//     "sqrt ( 9 7 6 . 2 0 - 2 0 9 . 9 9 + 5 0 4 . 9 0 * ( 6 5 2 . 3 0 ) / tan ( 2 5 4 . 7 0 ) )",
//     "",
//     "301.43847452938763",
//   },
//   {
//     "sqrt ( 3 1 4 . 0 4 - sqrt ( 8 6 7 . 0 9 ) ) ^ 5 6 . 6 3 * sqrt ( 2 3 3 . 5 7 )",
//     "",
//     "4.737982093319765e+70",
//   },
//   {
//     "sin ( 7 4 9 . 6 0 ) - 7 0 3 . 0 0 * sqrt ( 1 2 0 . 7 5 ) * 5 8 2 . 8 0 - 1 6 2 . 8 4",
//     "",
//     "-4502296.561454218",
//   },
//   {
//     "3 6 2 . 7 1 ^ 3 5 . 5 1 / 8 2 9 . 8 9 / sqrt ( 8 9 6 . 5 6 ) + ( 3 6 7 . 3 1 )",
//     "",
//     "3.123551538380995e+86",
//   },
//   {
//     "6 9 . 1 5 - 9 1 7 . 1 5 + 9 4 5 . 2 6 - 6 9 1 . 4 6 * 6 1 4 . 9 8 * 1 4 6 . 2 3 - 7 7 0 . 0 6",
//     "",
//     "-62182650.97308401",
//   },
//   {
//     "7 4 . 4 0 - 8 1 0 . 3 5 * tan ( 2 3 9 . 4 2 ) - 8 8 2 . 6 7 / cos ( 2 3 1 . 1 7 )",
//     "",
//     "110.82139418589395",
//   },
//   {
//     "( cos ( 6 9 8 . 9 6 ) + sqrt ( 9 4 5 . 9 2 * 1 9 1 . 1 6 + ( 8 0 1 . 5 3 ) ) )",
//     "",
//     "427.10653095163394",
//   },
//   {
//     "( 9 9 9 . 9 3 ) + cos ( 5 0 2 . 6 4 * cos ( tan ( 6 9 9 . 4 3 * 8 0 2 . 4 9 ) ) )",
//     "",
//     "999.1360066513722",
//   },
//   {
//     "7 2 2 . 2 6 + cos ( 6 3 0 . 9 6 + 3 9 7 . 6 8 ^ 4 3 . 8 9 - 6 3 . 5 7 ) + 7 4 3 . 5 1",
//     "",
//     "1466.546947104565",
//   },
//   {
//     "( 2 7 7 . 7 5 ) + 7 1 . 2 5 ^ 2 4 . 6 9 - sin ( 1 3 3 . 5 8 - 7 3 3 . 7 4 )",
//     "",
//     "5.562351219346267e+45",
//   },
//   {
//     "5 1 3 . 3 1 * ( 5 0 2 . 1 8 + sqrt ( 6 8 7 . 7 7 / tan ( 7 5 7 . 5 0 ) / 8 4 4 . 1 5 ) )",
//     "",
//     "258302.9495633383",
//   },
//   {
//     "tan ( 9 8 5 . 2 6 / 6 4 8 . 3 1 / 6 0 9 . 0 4 / 8 8 0 . 0 1 / 2 2 . 2 5 * cos ( cos ( 2 7 1 . 3 8 ) ) )",
//     "",
//     "2.2242419159371263e-9",
//   },
//   {
//     "4 0 4 . 3 0 - 1 7 3 . 9 2 ^ 1 . 8 6 * 2 1 9 . 6 0 / 9 9 2 . 5 4 / 2 3 7 . 4 3 + 3 6 4 . 4 8",
//     "",
//     "755.0901451049729",
//   },
//   {
//     "( 3 5 3 . 5 5 + ( 1 8 9 . 8 1 - 1 3 2 . 0 6 ^ 3 6 . 9 4 ) ) + 1 6 0 . 6 5",
//     "",
//     "-2.1942775565433594e+78",
//   },
//   {
//     "2 7 7 . 0 3 / tan ( 6 0 0 . 4 0 ) - 6 5 . 8 4 + cos ( sin ( tan ( ( 3 3 3 . 9 0 ) ) ) )",
//     "",
//     "92.53494336857631",
//   },
//   {
//     "7 2 8 . 5 9 / 1 6 3 . 0 7 / 4 2 0 . 7 7 * 5 6 3 . 7 2 ^ sin ( ( 3 0 1 . 1 9 * 2 6 2 . 0 4 ) )",
//     "",
//     "5.7700495991139205",
//   },
//   {
//     "2 3 6 . 8 5 / 3 4 8 . 5 5 ^ sqrt ( 3 4 9 . 7 5 ) ^ cos ( sin ( 5 9 0 . 6 8 / 8 0 1 . 1 8 ) )",
//     "",
//     "6.761439003954854e-46",
//   },
//   {
//     "cos ( 9 3 1 . 0 4 + 2 4 6 . 0 6 - 4 0 2 . 3 9 + 5 0 5 . 3 4 ) - 1 8 0 . 0 3 * 9 2 2 . 0 2",
//     "",
//     "-165992.19999379414",
//   },
//   {
//     "( 4 2 6 . 2 6 - tan ( cos ( 4 6 7 . 9 1 ) * 1 4 . 9 5 + 5 7 3 . 6 2 ) )",
//     "",
//     "425.7051766633324",
//   },
//   {
//     "8 9 7 . 6 0 - 9 6 5 . 9 1 / sin ( 6 1 4 . 0 7 ) * 3 7 7 . 4 6 + 9 2 5 . 3 7 * tan ( 8 9 1 . 4 3 )",
//     "",
//     "379910.85879781545",
//   },
//   {
//     "7 5 1 . 1 6 + sin ( 4 4 3 . 9 2 / 9 6 4 . 1 1 / 4 7 8 . 9 4 ) ^ 8 8 . 3 7 + 1 6 6 . 0 2",
//     "",
//     "917.18",
//   },
//   {
//     "5 1 3 . 9 3 / ( 9 0 1 . 9 0 ) + 1 3 0 . 5 5 - 4 9 8 . 2 3 - 8 1 1 . 4 4 * 2 1 4 . 2 7",
//     "",
//     "-174234.3589696419",
//   },
//   {
//     "8 1 7 . 0 6 * 9 4 8 . 2 2 / 4 5 6 . 5 8 ^ sqrt ( 9 2 7 . 4 1 + tan ( 7 2 9 . 5 0 * 4 4 2 . 1 3 ) )",
//     "",
//     "8.303642002001006e-76",
//   },
//   {
//     "7 8 7 . 4 5 * 1 7 1 . 3 8 / 1 6 7 . 1 2 ^ 1 8 . 3 3 ^ 5 5 . 8 9 - 8 5 1 . 9 7 + sin ( ( tan ( sin ( 3 0 8 . 8 8 ) ) ) )",
//     "",
//     "-851.9702371477681",
//   },
//   {
//     "( ( 4 5 3 . 5 5 - 1 3 2 . 4 7 ) + tan ( 2 9 9 . 8 1 ) + 7 2 0 . 2 7 )",
//     "",
//     "1039.6046080135106",
//   },
//   {
//     "5 4 2 . 4 0 + sin ( 7 2 6 . 0 3 ) * 9 5 0 . 0 6 + sqrt ( 1 6 8 . 6 4 * 6 5 1 . 0 7 )",
//     "",
//     "973.5584892721574",
//   },
//   {
//     "sin ( 1 4 9 . 8 1 - 7 6 1 . 0 7 + 5 9 6 . 1 2 / 3 6 1 . 6 7 ) / 2 8 6 . 8 4 + 2 3 0 . 1 0",
//     "",
//     "230.10326786186354",
//   },
//   {
//     "4 8 1 . 6 7 + 1 1 5 . 8 7 + tan ( sin ( 1 4 4 . 9 0 * 7 3 5 . 6 6 ) + cos ( sqrt ( 8 2 . 9 7 ) ) )",
//     "",
//     "597.5677765628935",
//   },
//   {
//     "7 7 5 . 4 9 + 5 4 . 1 8 + 7 2 8 . 2 3 * sin ( 3 7 7 . 0 4 + 1 1 9 . 0 9 ) * 1 1 2 . 0 3",
//     "",
//     "57369.10459158725",
//   },
//   {
//     "2 1 9 . 9 4 * 4 9 3 . 5 4 + 4 2 4 . 6 8 - ( 3 7 2 . 4 9 + ( 7 2 0 . 8 1 * 4 2 0 . 5 8 ) )",
//     "",
//     "-194556.89219999994",
//   },
//   {
//     "4 0 4 . 8 7 ^ cos ( ( 5 1 2 . 1 4 - 8 4 7 . 7 2 + 7 7 0 . 9 8 / 5 3 7 . 9 7 ) )",
//     "",
//     "222.00457422919075",
//   },
//   {
//     "sin ( 5 3 0 . 4 0 - 6 3 7 . 9 9 / 5 7 9 . 1 8 * 5 6 3 . 4 4 ) * 2 8 3 . 2 9 * tan ( 7 9 4 . 0 6 )",
//     "",
//     "-991.8590405921576",
//   },
//   {
//     "5 5 2 . 1 4 / 7 5 7 . 7 3 / 9 2 2 . 0 6 + 4 2 0 . 7 4 - 8 6 0 . 5 6 ^ 1 . 9 9 + 7 5 9 . 1 1",
//     "",
//     "-690992.9024440418",
//   },
//   {
//     "2 2 1 . 2 0 - ( sqrt ( 2 2 0 . 9 5 + 4 1 6 . 1 2 / 3 4 1 . 7 4 ) + 9 9 0 . 7 2 )",
//     "",
//     "-784.4252893579987",
//   },
//   {
//     "cos ( 2 4 1 . 9 8 ) * 2 9 9 . 0 8 / 8 8 7 . 1 6 / sin ( 4 3 9 . 5 5 + 6 5 3 . 0 4 )",
//     "",
//     "-0.7265695362922697",
//   },
//   {
//     "( 6 4 0 . 2 8 * 5 5 7 . 8 7 ) ^ 7 . 4 6 + 1 0 4 . 5 2 + 4 5 . 1 7 - 3 5 3 . 7 9",
//     "",
//     "2.6586181176273456e+41",
//   },
//   {
//     "4 9 4 . 0 8 * ( ( sqrt ( 8 6 8 . 3 3 - cos ( 1 0 2 . 0 5 * 7 5 7 . 5 6 ^ 9 2 . 9 8 ) ) ) )",
//     "",
//     "14564.772186215705",
//   },
//   {
//     "tan ( 9 9 4 . 6 9 ) + sin ( ( 6 9 9 . 3 1 ) / 2 9 9 . 3 0 ) / 1 9 2 . 2 6",
//     "",
//     "-12.189074561528923",
//   },
//   {
//     "( ( 5 9 9 . 7 4 / 8 1 4 . 8 8 + sin ( 8 7 7 . 6 3 ) - 8 0 9 . 8 5 ) )",
//     "",
//     "-808.7334281004339",
//   },
//   {
//     "2 6 8 . 1 3 / 8 6 5 . 8 1 + 5 0 9 . 8 0 - 8 8 5 . 4 8 * 2 0 9 . 6 6 - 2 5 0 . 7 2 / 8 3 2 . 4 8",
//     "",
//     "-185139.92828551773",
//   },
//   {
//     "4 4 3 . 7 5 + ( 1 2 3 . 4 9 ) - 1 9 1 . 5 4 + 6 9 7 . 9 2 - cos ( 1 9 0 . 4 8 )",
//     "",
//     "1074.603318459858",
//   },
//   {
//     "( 7 7 4 . 8 9 ) / tan ( 1 7 4 . 6 0 / 3 4 2 . 7 5 ) / 1 9 . 8 8 / tan ( 8 5 6 . 4 9 )",
//     "",
//     "-4618.131429855874",
//   },
//   {
//     "( 7 4 8 . 6 9 + sqrt ( 7 8 8 . 1 3 * 9 3 . 8 9 - 9 6 8 . 7 2 * 6 9 8 . 0 7 ^ cos ( 8 8 6 . 4 2 ) ) )",
//     "",
//     "1020.7117991208493",
//   },
//   {
//     "1 2 9 . 8 9 + 7 9 3 . 7 4 ^ 1 . 2 2 + 2 2 7 . 1 2 - cos ( 1 6 7 . 7 9 + 6 5 . 6 3 )",
//     "",
//     "3805.9253451983936",
//   },
//   {
//     "9 5 3 . 7 7 + 1 1 9 . 8 7 * 6 9 7 . 0 2 + sqrt ( 6 6 1 . 1 2 + 7 8 0 . 6 5 * 9 4 8 . 6 6 )",
//     "",
//     "85366.5060331948",
//   },
//   {
//     "1 2 3 . 9 9 ^ 4 3 . 8 6 - 2 8 5 . 8 6 / 6 9 0 . 2 7 ^ 7 . 4 5 / sin ( 3 0 1 . 9 5 )",
//     "",
//     "6.54544092669711e+91",
//   },
//   {
//     "6 5 2 . 8 7 * 4 8 3 . 5 9 + 6 5 1 . 7 0 / 7 6 4 . 1 3 ^ ( 6 0 7 . 7 4 + 1 5 2 . 9 7 )",
//     "",
//     "315721.4033",
//   },
//   {
//     "6 4 9 . 2 3 + 7 9 9 . 2 9 - 9 2 4 . 2 3 / sqrt ( 1 3 4 . 5 2 + tan ( 4 2 8 . 5 7 * 4 2 4 . 9 3 ) )",
//     "",
//     "1368.5050616891829",
//   },
//   {
//     "cos ( 2 3 8 . 0 8 * 7 8 9 . 4 1 / cos ( 7 4 8 . 3 1 / 7 1 7 . 9 3 + 7 7 9 . 9 5 ) )",
//     "",
//     "-0.8729566504479931",
//   },
//   {
//     "tan ( tan ( sin ( 8 0 7 . 7 9 * 2 6 4 . 8 8 - 5 6 . 6 7 ) + 9 1 7 . 6 5 ^ 5 3 . 9 9 ) )",
//     "",
//     "0.0027501962514997896",
//   },
//   {
//     "5 2 2 . 3 9 * 8 9 2 . 2 1 / 9 6 6 . 6 4 - 6 9 . 6 6 + 1 1 0 . 8 4 * 6 0 . 9 2 / tan ( 6 7 1 . 1 4 )",
//     "",
//     "-5486.270083249504",
//   },
//   {
//     "5 7 5 . 0 9 / 3 2 7 . 0 6 - 2 6 4 . 7 6 + 2 5 9 . 3 2 ^ 3 5 . 0 8 + 3 2 4 . 0 3 * sqrt ( 9 3 1 . 5 3 )",
//     "",
//     "4.757374425895513e+84",
//   },
//   {
//     "3 2 0 . 4 9 - 5 0 7 . 3 7 / 8 4 5 . 2 1 ^ ( 8 6 . 2 8 ) + 8 8 6 . 5 9 - 9 1 3 . 8 9",
//     "",
//     "293.18999999999994",
//   },
//   {
//     "( 5 8 3 . 9 1 + 5 6 5 . 7 5 ) - 4 1 0 . 6 8 * tan ( cos ( 6 4 2 . 3 1 * 4 4 6 . 9 7 ) )",
//     "",
//     "1156.7794906120632",
//   },

//   {"8 * 8 - 3 + ( 2 ) / 1 * 8 + 8 ^ 3", "", "589"},
//   {"3 + 2 * 6 ^ 2 - 3 ^ 5 + 6 + 3 * 3", "", "-153"},
//   {"2 / 8 / 1 + 8 + 2 + 1 ^ ( 5 - ( 4 ) )", "", "11.25"},
//   {"4 * ( 7 * ( 1 ) ) * 3 / 7 * 3 ^ 7", "", "26244"},
//   {"3 / 7 + 3 * 6 * 5 * 2 + 3 / 9 + ( 3 )", "", "183.76190476190476"},
//   {"3 / 3 * 1 ^ 5 / 3 - ( 5 + 7 / 9 )", "", "-5.444444444444445"},
//   {"2 * ( 5 * 7 * 8 / 4 - 6 - 9 / 4 )", "", "123.5"},
//   {"3 - 7 / 1 - 8 / 7 * 6 - ( 7 + ( 9 ) )", "", "-26.857142857142858"},
//   {"9 / 4 * 5 / 1 * 2 + 8 - 4 / 7 + 4", "", "33.92857142857143"},
//   {"3 ^ 4 ^ 9 / 2 - 4 - 3 + 7 ^ 7 * 2", "", "75047317650146660"},
//   {"3 * 4 + 3 + 6 / 1 * 8 * 9 / 1 ^ 9", "", "447"},
//   {"7 / 1 ^ 6 + 3 * 1 - 4 * 5 + 6 / 2", "", "-7"},
//   {"3 * 8 - 7 + 9 - 7 / 2 + 8 ^ 7 ^ 2", "", "4398046511126.5"},
//   {"8 + 8 - 1 + 8 - ( 5 / 1 * 2 * 3 )", "", "-7"},
//   {"9 / 8 - 8 / 1 ^ 9 - 3 - 9 - 7 + 7", "", "-18.875"},
//   {"8 + 6 / 4 - 1 + 3 ^ 7 + 4 - 6 / 3", "", "2197.5"},
//   {"2 - 8 ^ ( 3 ) - 5 ^ 2 + 5 * 3 + 2", "", "-518"},
//   {"6 ^ 8 * 5 + ( 3 + 3 + ( 2 ) / 2 )", "", "8398087"},
//   {"5 ^ 5 + 5 * 7 - 8 ^ ( 3 - 6 ) - 1", "", "3158.998046875"},
//   {"6 * ( 1 ) - 8 - 8 + 6 / 9 + 1 * 3", "", "-6.333333333333334"},
//   {"8 * 4 ^ 3 * 7 ^ ( 6 * 6 / 9 ^ 3 )", "", "563.6418056580223"},
//   {"3 + 5 / 6 * 9 ^ 3 - 3 + 5 - 9 / 6", "", "611"},
//   {"5 + 7 * 2 / 7 * ( 6 - 4 - 1 / 8 )", "", "8.75"},
//   {"4 / 3 + 6 + 1 - 7 - 4 - 7 ^ 8 - 6", "", "-5764809.666666667"},
//   {"4 * 8 * 3 ^ 3 + ( 5 ) - 9 + 8 / 4", "", "862"},
//   {"6 / 8 + 1 / 9 + 7 / 4 - 7 ^ 2 - 3", "", "-49.388888888888886"},
//   {"8 / 4 / 2 * 9 ^ 3 / 3 * 2 * 7 / 6", "", "567"},
//   {"9 / 2 / 3 * 3 + 3 / 3 / 6 + 3 / 8", "", "5.041666666666667"},
//   {"6 + 2 ^ 3 - 6 * 5 + 7 - ( 1 * 5 )", "", "-14"},
//   {"3 / 1 ^ 9 * ( 9 + 3 + 9 * 3 ^ 1 )", "", "117"},
//   {"4 ^ 8 ^ 1 + 7 * 4 * 6 * ( 9 + 5 )", "", "67888"},
//   {"3 + 6 - 6 * 7 ^ ( 2 ) / ( 4 ) / ( 3 )", "", "-15.5"},
//   {"3 + 4 + 6 * 1 + 2 ^ 7 / 7 * 9 / 3", "", "67.85714285714286"},
//   {"7 * 8 - 6 - 3 / 6 ^ 6 ^ 8 + 7 * 9", "", "113"},
//   {"2 + 4 ^ 1 - 8 / 3 / ( 8 * 2 + 5 )", "", "5.8730158730158735"},
//   {"6 * 1 + 7 - 4 - 3 * 4 ^ 6 ^ 3 + 9", "", "-206158430190"},
//   {"7 / 5 * 5 * 1 + ( ( 5 ) * 4 ^ 5 )", "", "5127"},
//   {"7 * 1 - 5 - 6 * ( 3 / 8 / 5 ) ^ 3", "", "1.99746875"},
//   {"9 - 7 * 1 * 6 ^ 3 + 2 ^ 9 / 2 + 3", "", "-1244"},
//   {"4 * 6 - 3 * 1 ^ 7 * 5 / 9 - 1 ^ 5", "", "21.333333333333332"},
//   {"8 * 3 - 7 + 3 * 6 ^ 6 / ( 3 - 8 )", "", "-27976.6"},
//   {"5 * 2 / 2 * 1 - 6 - 8 - ( 5 + 6 )", "", "-20"},
//   {"3 - 8 - 7 ^ 8 / 2 / 6 + 6 ^ 1 * 3", "", "-480387.0833333333"},
//   {"1 ^ 3 / 3 + 8 + 1 ^ 6 * 3 - 6 + 1", "", "6.333333333333334"},
//   {"6 * ( 8 / 5 ^ ( 3 - 1 + 3 * 3 ) )", "", "9.8304e-7"},
//   {"1 / 6 / 1 + 8 + 1 ^ 3 ^ 7 + 5 - 2", "", "12.166666666666666"},
//   {"6 ^ 8 * 7 + 3 ^ 8 * 1 ^ 4 + 8 / 4", "", "11763875"},
//   {"5 + 6 / 8 - 3 - 3 * 3 / 2 / 9 + 3", "", "5.25"},
//   {"3 * 3 / 9 ^ 4 + 3 * 5 + 8 - 2 * 9", "", "5.001371742112482"},
//   {"9 / 4 * 6 - 1 - 3 / 9 ^ 1 / 4 ^ 2", "", "12.479166666666666"},
//   {"9 + 6 + 6 ^ ( ( 9 + 1 - 3 * 9 ) )", "", "15.000000000000059"},
//   {"9 ^ 4 ^ 3 - 4 / 1 + 2 / 3 ^ 6 - 4", "", "282429536473.00275"},
//   {"1 / 2 ^ 9 ^ 8 + 8 + 3 ^ 3 / 8 / 6", "", "8.5625"},
//   {"5 * 5 / 2 + 8 / 8 * 1 + 3 * 9 * 3", "", "94.5"},
//   {"1 + 5 / 3 - ( ( 3 / 8 - 3 + 8 + 2 ) )", "", "-4.708333333333333"},
//   {"4 * 1 + 1 ^ 7 / 1 * 5 - 9 / 5 * 7", "", "-3.5999999999999996"},
//   {"3 / 7 * 8 / 6 - 3 ^ 6 - 2 - 7 / 3", "", "-732.7619047619048"},
//   {"7 - 6 - 6 + 6 - 9 - 3 * ( 5 + ( ( 7 ) ) )", "", "-44"},
//   {"8 - 2 * 8 - 9 / 7 - 3 ^ 6 * ( 7 )", "", "-5112.285714285715"},
//   {"8 * 7 + 3 * 9 + 7 * 9 * 2 / 6 * 8", "", "251"},
//   {"6 + ( 4 - 7 + 7 ) - 5 ^ 3 - 6 * 9", "", "-169"},
//   {"( 9 * 9 ) ^ 1 - 3 / 8 ^ 3 ^ 9 * 8", "", "81"},
//   {"6 ^ ( 7 ) * ( ( 1 ) ) * 3 / 2 * 4", "", "1679616"},
//   {"6 - 1 ^ 1 - 6 / 7 ^ 5 + 3 ^ 2 + 1", "", "14.999643005890402"},
//   {"9 / 6 ^ 2 * 1 - 3 * ( 2 - 5 ) / 3", "", "3.25"},
//   {"9 + 2 * 7 / 4 - 8 + 6 / 8 + 5 ^ 2", "", "30.25"},
//   {"8 - 8 + 4 / ( 2 / 3 / 2 + 3 + 9 )", "", "0.3243243243243243"},
//   {"4 * 3 / 3 ^ ( 6 - ( 2 ) ) * 6 / 2", "", "0.4444444444444444"},
//   {"( 5 - 2 - 2 - 3 / 6 ^ 3 ) ^ 4 - 7", "", "-6.054408827672516"},
//   {"8 * 6 + 3 + ( 5 * 3 ^ 5 ) * 3 ^ 4", "", "98466"},
//   {"5 / 5 + ( 5 * 3 * 4 + 3 ^ 9 * 4 )", "", "78793"},
//   {"3 ^ 6 * 9 / 9 * 3 * 6 / 3 - 4 * ( 6 )", "", "4350"},
//   {"5 * 3 / 8 + 3 ^ 6 ^ 6 + 4 + 4 / 1", "", "150094635296999140"},
//   {"4 ^ ( 6 ) + 9 + 1 * 1 * 5 ^ 3 ^ 9", "", "7450580596923832000"},
//   {"6 * 1 ^ 1 * 1 ^ 3 + 7 / 2 ^ 9 ^ 4", "", "6.000000000101863"},
//   {"8 * 7 * 5 * 6 / 4 * 3 ^ 5 ^ 6 / 6", "", "14412379246625430"},
//   {"4 ^ 8 * 8 * 9 * 4 - 5 - 8 - 6 * 3", "", "18874337"},
//   {"2 + ( 5 ) + 8 + ( 3 * 6 + 2 ) - 3", "", "32"},
//   {"7 / 6 / 3 ^ 8 ^ ( 5 * 8 + 7 ) / 7", "", "6.672014401050656e-181"},
//   {"6 * 3 - 5 * 3 * 4 / 1 - ( 8 / 3 )", "", "-44.666666666666664"},
//   {"4 ^ 6 / 2 + 5 - 6 / 4 + 4 + 5 + 7", "", "2067.5"},
//   {"3 + ( 8 ) ^ 2 + 1 + 7 * 9 * 3 - 6", "", "251"},
//   {"8 * 8 / 3 * 3 ^ ( 6 - 3 ^ 8 ) * 8", "", "0"},
//   {"9 * 2 - 7 * 6 ^ ( 5 / 8 ^ 2 ) + 6", "", "15.948234713899144"},
//   {"1 * 6 + 7 ^ 6 + 5 + 1 + 3 - 5 - 5", "", "117654"},
//   {"3 + 7 + 2 ^ 7 * 6 + 2 * 4 / 1 + ( 1 )", "", "787"},
//   {"3 - 1 / 1 - 7 * 2 * 9 / ( 6 ) - 1", "", "-20"},
//   {"4 * ( 3 - 7 / 4 ) + 1 - 5 ^ 6 ^ 6", "", "-1.455191522836685e+25"},
//   {"1 - 5 - 8 * 8 * 7 - 4 + 2 ^ 3 * 9", "", "-384"},
//   {"3 * ( 6 + 6 / 6 ^ 3 ) + 4 * 4 * 5", "", "98.08333333333333"},
//   {"6 / 7 + 6 - 1 / 5 / 4 ^ 3 - 8 / 9", "", "5.965128968253968"},
//   {"( 6 ) * 8 / 7 / 7 / 3 ^ 5 - 5 * 3", "", "-14.99596875787352"},
//   {"3 + 5 - 9 ^ 8 / 3 - 3 + 5 * 3 ^ 4", "", "-14348497"},
//   {"1 / 9 / 1 - 4 ^ 8 * ( 1 / 3 ) + 6", "", "-21839.222222222223"},
//   {"3 ^ ( 1 - 5 / 7 ) ^ 3 - 5 - 1 + 6", "", "2.564254199721457"},
//   {"6 - 9 * ( 6 ) - ( 2 - 3 ^ 4 ) - 4", "", "27"},
//   {"( 9 * 7 / 1 - 7 ) * 7 ^ 8 * 2 * 6", "", "3873946272"},
//   {"1 * 8 + 2 + 6 * 8 * ( 4 + 5 ^ 2 )", "", "1402"},
//   {"7 - 7 * 6 * 7 + 4 - 2 + 1 - ( 1 )", "", "-285"},
//   {"1 ^ 8 / 8 + 1 ^ 1 ^ 5 / 1 * 9 / 5", "", "1.925"},
};






void runTestCases(const std::vector<testCase_t> &cases, int& pass) {
    CCalculate testCalc;
    IEvalEquationOptions options = {
        .trigRad = true
    };

    // for (testCase_t t : numberCases) {
    // for (testCase_t t : fractionCases) {
    for (testCase_t t : cases) {
        std::string chars = std::get<0>(t);
        std::string expect = std::get<2>(t);

        testCalc.reset();
        const char* cc = chars.c_str();

        for (size_t pos = 0, n = chars.length(); pos < n;) {
            size_t next = chars.find(" ", pos);
            if (next == std::string::npos) {
                next = n;
            }
            std::string cmd = chars.substr(pos, next - pos);
            pos = next + 1;

            const char ch =
                cmd == "±" ? '~'
                    : cmd.c_str()[0];
            testCalc.scan(actionFromKeyboard(ch));
        }

        testCalc.parseEquation();
        testCalc.evalEquation(options);
        TToken* result = testCalc.result();
        bool success =
            (result != nullptr && result->toString() == expect) ||
            (result == nullptr && expect == "");


        if (success) {
            pass++;
        } else {
            std::cout << (success ? " ok  " : "FAIL ") << chars << ": ";
            if (result == nullptr) {
                std::cout << "(no result)";
            } else {
                std::cout << result->toString() << " (expected " << expect << ")";
            }
            std::cout << std::endl;
        }
    }
}

void runTests() {
    int pass = 0;
    runTestCases(numberCases, pass);
    runTestCases(fractionCases, pass);
    runTestCases(autogenCases, pass);
    std::cout << pass << " passed" << std::endl;
}
