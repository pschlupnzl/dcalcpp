<!DOCTYPE html>
<html lang="en-us">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>DysCalculator C++</title>
    <style>
      .emscripten-hidden {
        display: none;
      }
      .emscripten {
        padding-right: 0;
        margin-left: auto;
        margin-right: auto;
        display: block;
      }
      textarea.emscripten {
        font-family: monospace;
        width: 80%;
      }
      div.emscripten {
        text-align: center;
      }
      div.emscripten_border {
        border: 1px solid black;
      }
      /* the canvas *must not* have any border or padding, or mouse coords will be wrong */
      canvas.emscripten {
        border: 0px none;
        background-color: black;
      }

      .spinner {
        height: 50px;
        width: 50px;
        margin: 0px auto;
        -webkit-animation: rotation 0.8s linear infinite;
        -moz-animation: rotation 0.8s linear infinite;
        -o-animation: rotation 0.8s linear infinite;
        animation: rotation 0.8s linear infinite;
        border-left: 10px solid rgb(0, 150, 240);
        border-right: 10px solid rgb(0, 150, 240);
        border-bottom: 10px solid rgb(0, 150, 240);
        border-top: 10px solid rgb(100, 0, 200);
        border-radius: 100%;
        background-color: rgb(200, 100, 250);
      }
      @-webkit-keyframes rotation {
        from {
          -webkit-transform: rotate(0deg);
        }
        to {
          -webkit-transform: rotate(360deg);
        }
      }
      @-moz-keyframes rotation {
        from {
          -moz-transform: rotate(0deg);
        }
        to {
          -moz-transform: rotate(360deg);
        }
      }
      @-o-keyframes rotation {
        from {
          -o-transform: rotate(0deg);
        }
        to {
          -o-transform: rotate(360deg);
        }
      }
      @keyframes rotation {
        from {
          transform: rotate(0deg);
        }
        to {
          transform: rotate(360deg);
        }
      }
    </style>

    <style>
      .calc-token {
        vertical-align: middle;
        margin: 0 0.15em;
      }
      .calc-token.calc-auto {
        color: #979797;
      }
      .calc-value {
        vertical-align: middle;
      }
      .calc-frac {
        display: inline-block;
        vertical-align: middle;
        font-size: 0.8em;
      }
      .calc-frac .calc-num,
      .calc-frac .calc-denom {
        display: block;
        text-align: center;
      }
      .calc-frac .calc-num {
        border-bottom: 1px solid;
      }

      .dcalc-display {
        font-size: 1.5em;
        height: 2em;
      }

      .dcalc-keyboard button {
        margin: 0.15em;
        padding: 1em;
      }
    </style>
  </head>
  <body>
    <hr />
    <figure style="overflow: visible" id="spinner">
      <div class="spinner"></div>
      <center style="margin-top: 0.5em"><strong>emscripten</strong></center>
    </figure>
    <div class="emscripten" id="status">Downloading...</div>
    <div class="emscripten">
      <progress value="0" max="100" id="progress" hidden="1"></progress>
    </div>
    <div class="emscripten-hidden">
      <div class="emscripten_border">
        <canvas
          class="emscripten"
          id="canvas"
          oncontextmenu="event.preventDefault()"
          tabindex="-1"
        ></canvas>
      </div>
      <hr />
      <div class="emscripten">
        <input type="checkbox" id="resize" />Resize canvas
        <input type="checkbox" id="pointerLock" checked />Lock/hide mouse
        pointer &nbsp;&nbsp;&nbsp;
        <input
          type="button"
          value="Fullscreen"
          onclick="Module.requestFullscreen(document.getElementById('pointerLock').checked, 
                                                                                document.getElementById('resize').checked)"
        />
      </div>

      <hr />
      <textarea class="emscripten" id="output" rows="8"></textarea>
      <hr />
    </div>

    <script type="text/javascript">
      var statusElement = document.getElementById("status");
      var progressElement = document.getElementById("progress");
      var spinnerElement = document.getElementById("spinner");

      var Module = {
        print: (function () {
          var element = document.getElementById("output");
          if (element) element.value = ""; // clear browser cache
          return (...args) => {
            var text = args.join(" ");
            // These replacements are necessary if you render to raw HTML
            //text = text.replace(/&/g, "&amp;");
            //text = text.replace(/</g, "&lt;");
            //text = text.replace(/>/g, "&gt;");
            //text = text.replace('\n', '<br>', 'g');
            console.log(text);
            if (element) {
              element.value += text + "\n";
              element.scrollTop = element.scrollHeight; // focus on bottom
            }
          };
        })(),
        canvas: (() => {
          var canvas = document.getElementById("canvas");

          // As a default initial behavior, pop up an alert when webgl context is lost. To make your
          // application robust, you may want to override this behavior before shipping!
          // See http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15.2
          canvas.addEventListener(
            "webglcontextlost",
            (e) => {
              alert("WebGL context lost. You will need to reload the page.");
              e.preventDefault();
            },
            false
          );

          return canvas;
        })(),
        setStatus: (text) => {
          Module.setStatus.last ??= { time: Date.now(), text: "" };
          if (text === Module.setStatus.last.text) return;
          var m = text.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/);
          var now = Date.now();
          if (m && now - Module.setStatus.last.time < 30) return; // if this is a progress update, skip it if too soon
          Module.setStatus.last.time = now;
          Module.setStatus.last.text = text;
          if (m) {
            text = m[1];
            progressElement.value = parseInt(m[2]) * 100;
            progressElement.max = parseInt(m[4]) * 100;
            progressElement.hidden = false;
            spinnerElement.hidden = false;
          } else {
            progressElement.value = null;
            progressElement.max = null;
            progressElement.hidden = true;
            if (!text) spinnerElement.hidden = true;
          }
          statusElement.innerHTML = text;
        },
        totalDependencies: 0,
        monitorRunDependencies: (left) => {
          this.totalDependencies = Math.max(this.totalDependencies, left);
          Module.setStatus(
            left
              ? "Preparing... (" +
                  (this.totalDependencies - left) +
                  "/" +
                  this.totalDependencies +
                  ")"
              : "All downloads complete."
          );
        },
      };
      Module.setStatus("Downloading...");
      window.onerror = () => {
        Module.setStatus("Exception thrown, see JavaScript console");
        spinnerElement.style.display = "none";
        Module.setStatus = (text) => {
          if (text) console.error("[post-exception status] " + text);
        };
      };
    </script>
    {{{ SCRIPT }}}

    <script>
      (function () {
        const out = document.createElement('div');
        out.className = "dcalc-display";
        document.body.appendChild(out);

        const tokenToHtml = (tokStr) => {
          let str = "";
          if (tokStr.startsWith("=")) {
            str += `<span class="calc-token">=</span>`;
            tokStr = tokStr.substring(1);
          }

          if (tokStr.startsWith("]")) {
            str += `<span class="calc-token calc-auto">)</span>`;
          } else if (tokStr.includes("_") ){
            const parts = tokStr.split('_').map((s)=>+s);
            if (parts.length < 3) {
              parts.splice(0, 0, 0);
            }
            str += `<span class="calc-token">`;
            if (parts[0]) {
              str += `<span class="calc-value">${parts[0]}</span>`;
            }
            if (parts[1]) {
              str += `
                <span class="calc-frac">
                  <span class="calc-num">${parts[1]}</span>
                  <span class="calc-denom">${parts[2] || "&nbsp;"}</span>
                </span>`;
            }
            str += `</span>`;
          } else {
            str += `<span class="calc-token">
              <span class="calc-value">${tokStr}</span>
            </span>`;
          }

          return str;
        }

        const handleKey = (key) => {
          const eqn = Module.ccall('doScan', 'string', ['number'], [key.ch.charCodeAt(0)]);
          out.innerHTML = eqn.split(" ").map(tokenToHtml).join("");
          const result = Module.ccall('getResult', 'string', null);
          out.innerHTML += result.startsWith("=") 
            ? tokenToHtml(result)
            : `<span>${result}</span>`;
        };

        const KEYS = [
          [
            { ch: "C", label: "AC" },
            { ch: "c", label: "⌫"}
          ],
          [
            { ch: '~', label: '±'},
            { ch: '0', label: '0'},
            { ch: '1', label: '1'},
            { ch: '2', label: '2'},
            { ch: '3', label: '3'},
            { ch: '4', label: '4'},
            { ch: '5', label: '5'},
            { ch: '6', label: '6'},
            { ch: '7', label: '7'},
            { ch: '8', label: '8'},
            { ch: '9', label: '9'},
            { ch: '.', label: '.'},
          ],
          [
            { ch: '_', label: 'ˣ⁄y' },
            { ch: '(', label: '(' },
            { ch: ')', label: ')' },
            { ch: 'V', label: '√' },
            { ch: '@', label: '²' },
            { ch: '/', label: '÷' },
            { ch: '*', label: '×' },
            { ch: '+', label: '+' },
            { ch: '-', label: '-' },
          ],
          [
            { ch: 'i', label: 'sin' },
            { ch: 'o', label: 'cos' },
            { ch: 'p', label: 'tan' },
            { ch: 'I', label: 'asin' },
            { ch: 'O', label: 'acos' },
            { ch: 'P', label: 'atan' },
          ]
        ];
        const keyboard = document.createElement('div');
        keyboard.className = 'dcalc-keyboard'
        KEYS.forEach((row) => {
          const rowb = document.createElement('div');
          row.forEach((key) => {
            const keyb = document.createElement('button');
            keyb.innerHTML = key.label;
            keyb.onclick = function () {
              handleKey(key);
            }
            rowb.appendChild(keyb);
          })
          keyboard.appendChild(rowb);
        })
        document.body.appendChild(keyboard);
      }());
    </script>
  </body>
</html>
